# -*- coding: utf-8 -*-
"""fcc_book_recommendation_knn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/freeCodeCamp/boilerplate-book-recommendation-engine/blob/master/fcc_book_recommendation_knn.ipynb
"""

# import libraries (you may add additional imports but you may not have to)
import numpy as np
import pandas as pd
from scipy.sparse import csr_matrix
from sklearn.neighbors import NearestNeighbors
import matplotlib.pyplot as plt

# get data files
!wget https://cdn.freecodecamp.org/project-data/books/book-crossings.zip

!unzip book-crossings.zip

books_filename = 'BX-Books.csv'
ratings_filename = 'BX-Book-Ratings.csv'

# import csv data into dataframes
df_books = pd.read_csv(
    books_filename,
    encoding = "ISO-8859-1",
    sep=";",
    header=0,
    names=['isbn', 'title', 'author'],
    usecols=['isbn', 'title', 'author'],
    dtype={'isbn': 'str', 'title': 'str', 'author': 'str'})

df_ratings = pd.read_csv(
    ratings_filename,
    encoding = "ISO-8859-1",
    sep=";",
    header=0,
    names=['user', 'isbn', 'rating'],
    usecols=['user', 'isbn', 'rating'],
    dtype={'user': 'int32', 'isbn': 'str', 'rating': 'float32'})

def get_recommends(book=""):
    # Filter for books with at least 100 ratings
    books_with_ratings = df_ratings.groupby('isbn').count()['user'].reset_index()
    popular_books = books_with_ratings[books_with_ratings['user'] >= 100]['isbn']
    df_ratings_filtered = df_ratings[df_ratings['isbn'].isin(popular_books)]

    # Merge to get book titles
    df_books_ratings = pd.merge(df_ratings_filtered, df_books, on='isbn')

    # Create user-item matrix
    user_item_matrix = df_books_ratings.pivot_table(index='title', columns='user', values='rating').fillna(0)
    book_titles = user_item_matrix.index

    # Convert to sparse matrix for efficiency
    user_item_matrix_sparse = csr_matrix(user_item_matrix.values)

    # Create KNN model
    model_knn = NearestNeighbors(metric='cosine', algorithm='brute')
    model_knn.fit(user_item_matrix_sparse)

    # Get book index
    book_index = np.where(book_titles == book)[0][0]

    # Find nearest neighbors
    distances, indices = model_knn.kneighbors(user_item_matrix_sparse[book_index], n_neighbors=6)

    # Get recommended books (excluding the input book)
    recommended_books = []
    for i in range(1, len(distances.flatten())):
        recommended_books.append((book_titles[indices.flatten()[i]], distances.flatten()[i]))

    return [book, recommended_books]

books = get_recommends("Where the Heart Is (Oprah's Book Club (Paperback))")
print(books)

def test_book_recommendation():
  test_pass = True
  recommends = get_recommends("Where the Heart Is (Oprah's Book Club (Paperback))")
  if recommends[0] != "Where the Heart Is (Oprah's Book Club (Paperback))":
    test_pass = False
  recommended_books = ["I'll Be Seeing You", 'The Weight of Water', 'The Surgeon', 'I Know This Much Is True']
  recommended_books_dist = [0.8, 0.77, 0.77, 0.77]
  for i in range(2):
    if recommends[1][i][0] not in recommended_books:
      test_pass = False
    if abs(recommends[1][i][1] - recommended_books_dist[i]) >= 0.05:
      test_pass = False
  if test_pass:
    print("You passed the challenge! 🎉🎉🎉🎉🎉")
  else:
    print("You haven't passed yet. Keep trying!")

test_book_recommendation()

