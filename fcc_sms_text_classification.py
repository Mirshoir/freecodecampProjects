# -*- coding: utf-8 -*-
"""fcc_sms_text_classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/freeCodeCamp/boilerplate-neural-network-sms-text-classifier/blob/master/fcc_sms_text_classification.ipynb
"""

# import libraries
try:
  # %tensorflow_version only exists in Colab.
  !pip install tf-nightly
except Exception:
  pass
import tensorflow as tf
import pandas as pd
from tensorflow import keras
!pip install tensorflow-datasets
import tensorflow_datasets as tfds
import numpy as np
import matplotlib.pyplot as plt

print(tf.__version__)

# get data files
!wget https://cdn.freecodecamp.org/project-data/sms/train-data.tsv
!wget https://cdn.freecodecamp.org/project-data/sms/valid-data.tsv

train_file_path = "train-data.tsv"
test_file_path = "valid-data.tsv"

def predict_message(pred_text):
    sample_text = tf.data.Dataset.from_tensor_slices([pred_text]).batch(1)
    predictions = model.predict(sample_text)  # Using the globally defined `model`
    prediction = predictions[0][0]  # Get the raw prediction value

    # Convert the prediction to likeliness and label
    likeliness = tf.sigmoid(prediction).numpy()  # Apply sigmoid to normalize the output
    label = "spam" if likeliness > 0.5 else "ham"  # Determine label based on threshold

    return [likeliness, label]  # Return list as instructed

# Function to create a dataset from a file
def create_dataset(file_path):
    dataset = tf.data.TextLineDataset(file_path).map(
        lambda line: tf.io.decode_csv(
            line,
            record_defaults=["", ""],
            field_delim='\t',
            use_quote_delim=False
        )
    ).map(lambda text, label: (text, tf.cond(
        tf.equal(label, 'ham'),
        lambda: 0,
        lambda: 1
    )))  # Convert labels to numerical values (ham -> 0, spam -> 1)
    return dataset

# Define training and testing datasets
BUFFER_SIZE = 10000
BATCH_SIZE = 64

train_dataset = create_dataset(train_file_path)
test_dataset = create_dataset(test_file_path)

train_dataset = train_dataset.cache().shuffle(BUFFER_SIZE).prefetch(buffer_size=tf.data.AUTOTUNE).batch(BATCH_SIZE)
test_dataset = test_dataset.batch(BATCH_SIZE)

# Create the text encoder layer
VOCAB_SIZE = 1000
encoder = tf.keras.layers.TextVectorization(max_tokens=VOCAB_SIZE)
encoder.adapt(train_dataset.map(lambda text, label: text))

# Define the model
model = tf.keras.Sequential([
    encoder,
    tf.keras.layers.Embedding(
        input_dim=len(encoder.get_vocabulary()),
        output_dim=64,
        mask_zero=True  # Use masking to handle variable-length sequences
    ),
    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64)),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(1)
])

# Compile the model
model.compile(
    loss=tf.keras.losses.BinaryCrossentropy(from_logits=True),
    optimizer=tf.keras.optimizers.Adam(1e-4),
    metrics=['accuracy']
)

# Train the model
history = model.fit(
    train_dataset,
    epochs=10,
    validation_data=test_dataset,
    validation_steps=30
)

# Example usage of predict_message
sample_text = "Your free prize is waiting! Call now!"
result = predict_message(sample_text)
print(result)



# Run this cell to test your function and model. Do not modify contents.
def test_predictions():
  test_messages = ["how are you doing today",
                   "sale today! to stop texts call 98912460324",
                   "i dont want to go. can we try it a different day? available sat",
                   "our new mobile video service is live. just install on your phone to start watching.",
                   "you have won Â£1000 cash! call to claim your prize.",
                   "i'll bring it tomorrow. don't forget the milk.",
                   "wow, is your arm alright. that happened to me one time too"
                  ]

  test_answers = ["ham", "spam", "ham", "spam", "spam", "ham", "ham"]
  passed = True

  for msg, ans in zip(test_messages, test_answers):
    prediction = predict_message(msg)
    if prediction[1] != ans:
      passed = False

  if passed:
    print("You passed the challenge. Great job!")
  else:
    print("You haven't passed yet. Keep trying.")

test_predictions()